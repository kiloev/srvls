service: ${self:custom.var.projectName}

provider:
  name: aws
  runtime: python3.7
  region: ap-southeast-1
  memorySize: 256
  timeout: 10
  versionFunctions: false
  environment:
    MAILGUN_USER: ${env:MAILGUN_USER}
    MAILGUN_PASSWORD: ${env:MAILGUN_PASSWORD}
    STORAGES_BUCKET_NAME: ${self:custom.var.s3BucketName}
    STORAGES_CUSTOM_DOMAIN: ${self:custom.var.cdnHostName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::*"

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-wsgi

custom:
  var:
    projectName: srvls
    hostName: kputrajaya.com
    s3BucketName: ${self:custom.var.projectName}-${opt:stage, 'dev'}
    cdnHostName: cdn-${self:custom.var.projectName}.${self:custom.var.hostName}
  customDomain:
    domainName: ${self:custom.var.projectName}.${self:custom.var.hostName}
  pythonRequirements:
    dockerizePip: non-linux
  wsgi:
    app: ${self:custom.var.projectName}.wsgi.application
    packRequirements: false

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.var.s3BucketName}
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.var.cdnHostName}
          DefaultCacheBehavior:
            TargetOriginId: ${self:custom.var.projectName}
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: 2592000
            ForwardedValues:
              QueryString: false
          Enabled: true
          Origins:
            - Id: ${self:custom.var.projectName}
              DomainName: ${self:custom.var.s3BucketName}.s3.amazonaws.com
              S3OriginConfig:
                OriginAccessIdentity: ''
          PriceClass: PriceClass_200
          ViewerCertificate:
            AcmCertificateArn: ${env:CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
    Route53RecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${self:custom.var.hostName}.
        RecordSets:
        - Name: ${self:custom.var.cdnHostName}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt [CloudFrontDistribution, DomainName]
        - Name: ${self:custom.var.cdnHostName}
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt [CloudFrontDistribution, DomainName]
